{
  "name": "Pull-request-notifier-for-bitbucket",
  "tagline": "Stash plugin that invokes a custom URL when a pull request event is triggered.",
  "body": "# Pull Request Notifier for Bitbucket [![Build Status](https://travis-ci.org/tomasbjerre/pull-request-notifier-for-bitbucket.svg?branch=master)](https://travis-ci.org/tomasbjerre/pull-request-notifier-for-bitbucket)\r\nThe original use case was to trigger Jenkins jobs to build pull requests that are created in Bitbucket. The plugin can be configured to trigger different Jenkins jobs for different repositories. It can supply custom parameters to the jenkins job using the variables. It can authenticate with HTTP Basic.\r\n\r\nIt can, for example, trigger a build in Jenkins. Parameterized Jenkins jobs can be triggered remotely via:\r\n```\r\nhttp://server/job/theJob/buildWithParameters?token=TOKEN&PARAMETER=Value\r\n```\r\n\r\nThe plugin can trigger any system, not only Jenkins. The plugin can notify any system that can be notified with a URL.\r\n\r\n[Here](https://raw.githubusercontent.com/tomasbjerre/pull-request-notifier-for-bitbucket/master/sandbox/all.png) is a screenshot of the admin GUI on global level. And [here](https://raw.githubusercontent.com/tomasbjerre/pull-request-notifier-for-bitbucket/master/sandbox/repo.png) is a screenshot of the admin GUI on repository level.\r\n\r\n\r\n[Here](http://bjurr.se/building-atlassian-stash-pull-requests-in-jenkins/) is a blog post that includes the plugin.\r\n\r\nAvailable in [Atlassian Marketplace](https://marketplace.atlassian.com/plugins/se.bjurr.prnfs.pull-request-notifier-for-stash).\r\n\r\n## Features\r\nThe Pull Request Notifier for Bitbucket can:\r\n\r\n* Invoke any URL, or set of URL:s, when a pull request event happens.\r\n * With variables available to add necessary parameters.\r\n * HTTP POST, PUT, GET and DELETE. POST and PUT also supports rendered post content. \r\n* Be configured to trigger on any [pull request event](https://developer.atlassian.com/static/javadoc/stash.old-perms-pre-feb4/2.0.1/api/reference/com/atlassian/stash/event/pull/package-summary.html). Including extended events:\r\n * RESCOPED_FROM, when source branch change\r\n * RESCOPED_TO, when target branch change\r\n * BUTTON_TRIGGER, when trigger button in pull request view is pressed\r\n* Can invoke CSRF protected systems, using the ${INJECTION_URL_VALUE} variable. How to to that with Jenkins is described below.\r\n* Be configured to only trigger if the pull request mathches a filter. A filter text is constructed with any combination of the variables and then a regexp is constructed to match that text.\r\n* Add buttons to pull request view in Bitbucket. And map those buttons to URL invocations. This can be done by setting the filter string to ${BUTTON_TRIGGER_TITLE} and the filter regexp to title of button.\r\n* Authenticate with HTTP basic authentication.\r\n* Optionally allow any SSL certificate.\r\n* Use custom SSL key store, type and password.\r\n* Send custom HTTP headers\r\n* Can optionally use proxy to connect\r\n* Can let users and/or admins do configuration. Or restrict configuration to just system admins. A user will have to browse to the configuration page at `http://domain/bitbucket/plugins/servlet/prnfb/admin`.\r\n* Can enable trigger\r\n * If PR has, or has no, conflicts\r\n * Only if PR has conflicts\r\n * Only if PR has no conflicts\r\n* Nice configuration GUI.\r\n * Global at */bitbucket/plugins/servlet/prnfb/admin*\r\n * Repo level at */bitbucket/plugins/servlet/prnfb/admin/PROJECT_1/rep_1*\r\n\r\nThe plugin has its own implementation to create the RESCOPED_FROM and RESCOPED_TO events. RESCOPED is transformed to RESCOPED_TO if target branch changed, RESCOPED_FROM if source branch, or both, changed.\r\n\r\nThe filter text as well as the URL support variables. These are:\r\n\r\n* ${EVERYTHING_URL} Example: PULL_REQUEST_ID=1&PULL_REQUEST_TITLE=some%20thing...\r\n* ${PULL_REQUEST_ID} Example: 1\r\n* ${PULL_REQUEST_TITLE} Example: Anything\r\n* ${PULL_REQUEST_VERSION} Example: 1\r\n* ${PULL_REQUEST_COMMENT_TEXT} Example: A comment\r\n* ${PULL_REQUEST_ACTION} Example: OPENED\r\n* ${PULL_REQUEST_STATE} Example: DECLINED, MERGED, OPEN\r\n* ${BUTTON_TRIGGER_TITLE} Example: Trigger Notification\r\n* ${INJECTION_URL_VALUE} Value retrieved from any URL\r\n* ${PULL_REQUEST_URL} Example: http://localhost:7990/projects/PROJECT_1/repos/rep_1/pull-requests/1\r\n* ${PULL_REQUEST_USER_DISPLAY_NAME} Example: Some User\r\n* ${PULL_REQUEST_USER_EMAIL_ADDRESS} Example: some.user@bitbucket.domain\r\n* ${PULL_REQUEST_USER_ID} Example: 1\r\n* ${PULL_REQUEST_USER_NAME} Example: user.name\r\n* ${PULL_REQUEST_USER_SLUG} Example: user.name\r\n* ${PULL_REQUEST_AUTHOR_DISPLAY_NAME} Example: Administrator\r\n* ${PULL_REQUEST_AUTHOR_EMAIL} Example: admin@example.com\r\n* ${PULL_REQUEST_AUTHOR_ID} Example: 1\r\n* ${PULL_REQUEST_AUTHOR_NAME} Example: admin\r\n* ${PULL_REQUEST_AUTHOR_SLUG} Example: admin\r\n* ${PULL_REQUEST_REVIEWERS} Example: Administrator,User\r\n* ${PULL_REQUEST_REVIEWERS_ID} Example: 1,2\r\n* ${PULL_REQUEST_REVIEWERS_SLUG} Example: admin,user\r\n* ${PULL_REQUEST_REVIEWERS_APPROVED_COUNT} Number of reviewers that approved the PR.\r\n* ${PULL_REQUEST_PARTICIPANTS_APPROVED_COUNT} Number of participants that approved the PR.\r\n* ${PULL_REQUEST_MERGE_COMMIT} Hash of merged commit (only available for merged-event).\r\n* ${PULL_REQUEST_FROM_SSH_CLONE_URL} Example: ssh://git@localhost:7999/project_1/rep_1\r\n* ${PULL_REQUEST_FROM_HTTP_CLONE_URL} Example: http://admin@localhost:7990/bitbucket/scm/project_1/rep_1.git\r\n* ${PULL_REQUEST_FROM_HASH} Example: 6053a1eaa1c009dd11092d09a72f3c41af1b59ad\r\n* ${PULL_REQUEST_FROM_ID} Example: refs/heads/branchmodmerge\r\n* ${PULL_REQUEST_FROM_BRANCH} Example: branchmodmerge\r\n* ${PULL_REQUEST_FROM_REPO_ID} Example: 1\r\n* ${PULL_REQUEST_FROM_REPO_NAME} Example: rep_1\r\n* ${PULL_REQUEST_FROM_REPO_PROJECT_ID} Example: 1\r\n* ${PULL_REQUEST_FROM_REPO_PROJECT_KEY} Example: PROJECT_1\r\n* ${PULL_REQUEST_FROM_REPO_SLUG} Example: rep_1\r\n* ${PULL_REQUEST_TO_SSH_CLONE_URL} Example: ssh://git@localhost:7999/project_1/rep_1\r\n* ${PULL_REQUEST_TO_HTTP_CLONE_URL} Example: http://admin@localhost:7990/bitbucket/scm/project_1/rep_1.git\r\n* ${PULL_REQUEST_TO_HASH} Example: 6053a1eaa1c009dd11092d09a72f3c41af1b59ad\r\n* ${PULL_REQUEST_TO_ID} Example: refs/heads/branchmodmerge\r\n* ${PULL_REQUEST_TO_BRANCH} Example: branchmodmerge\r\n* ${PULL_REQUEST_TO_REPO_ID} Example: 1\r\n* ${PULL_REQUEST_TO_REPO_NAME} Example: rep_1\r\n* ${PULL_REQUEST_TO_REPO_PROJECT_ID} Example: 1\r\n* ${PULL_REQUEST_TO_REPO_PROJECT_KEY} Example: PROJECT_1\r\n* ${PULL_REQUEST_TO_REPO_SLUG} Example: rep_1\r\n\r\nThe ${PULL_REQUEST_USER...} contains information about the user who issued the event. Who commented it, who rejected it, who approved it...\r\n\r\nYou may want to use [Violation Comments to Stash plugin](https://wiki.jenkins-ci.org/display/JENKINS/Violation+Comments+to+Stash+Plugin) and/or [StashNotifier plugin](https://wiki.jenkins-ci.org/display/JENKINS/StashNotifier+Plugin) to report results back to Bitbucket.\r\n\r\n### REST\r\nSome rest resources are available. You can figure out the JSON structure by looking at the [DTO:s](https://github.com/tomasbjerre/pull-request-notifier-for-bitbucket/tree/master/src/main/java/se/bjurr/prnfb/presentation/dto).\r\n\r\n* `/bitbucket/rest/prnfb-admin/1.0/settings`\r\n * `GET` Get all global settings.\r\n * `POST` Store all global settings.\r\n\r\n* `/bitbucket/rest/prnfb-admin/1.0/settings/notifications`\r\n * `DELETE /{uuid}` Deletes notification with *uuid*.\r\n * `GET` Get all notifications.\r\n * `GET /{uuid}` Get notification with *uuid*.\r\n * `GET /projectKey/{projectKey}` Get all notifications for the project.\r\n * `GET /projectKey/{projectKey}/repositorySlug/{repositorySlug}` Get all notifications for the project and repository.\r\n * `POST` Save a notification.\r\n\r\n* `/bitbucket/rest/prnfb-admin/1.0/settings/buttons`\r\n * `DELETE /{uuid}` Deletes button with *uuid*.\r\n * `GET` Get all buttons that the current user is allowed to use.\r\n * `GET /{uuid}` Get button with *uuid*.\r\n * `GET /repository/{repositoryId}/pullrequest/{pullRequestId}` Get all buttons for repository that the current user is allowed to use.\r\n * `GET /projectKey/{projectKey}` Get all buttons for the project.\r\n * `GET /projectKey/{projectKey}/repositorySlug/{repositorySlug}` Get all buttons for the project and repository.\r\n * `POST` Save a button.\r\n * `POST {uuid}/press/repository/{repositoryId}/pullrequest/{pullRequestId}` Press the button.\r\n\r\nA new notification to trigger on *COMMENTED* can be added like this.\r\n```\r\ncurl -u admin:admin 'http://localhost:7990/bitbucket/rest/prnfb-admin/1.0/settings/notifications' -H 'Content-Type: application/json; charset=UTF-8' -H 'Accept: application/json, text/javascript, */*; q=0.01' --data-binary '{\"uuid\":\"\",\"name\":\"\",\"projectKey\":\"\",\"repositorySlug\":\"\",\"filterString\":\"\",\"filterRegexp\":\"\",\"triggers\":[\"COMMENTED\"],\"injectionUrl\":\"\",\"injectionUrlRegexp\":\"\",\"user\":\"\",\"password\":\"\",\"proxyUser\":\"\",\"proxyPassword\":\"\",\"proxyServer\":\"\",\"proxyPort\":\"\",\"url\":\"http://localhost:80/?abc\",\"method\":\"GET\",\"postContent\":\"\",\"headers\":[{\"name\":\"\",\"value\":\"\"}]}'\r\n```\r\n\r\nIt will respond with something like this.\r\n```\r\n{\"headers\":[],\"method\":\"GET\",\"name\":\"Notification\",\"triggerIfCanMerge\":\"ALWAYS\",\"triggerIgnoreStateList\":[],\"triggers\":[\"COMMENTED\"],\"url\":\"http://localhost:80/?abc\",\"uuid\":\"b1306a3a-5a87-4145-80b7-660bc986dd25\"}\r\n```\r\n\r\nIt can then be changed to trigger on *RESCOPED_FROM* and *RESCOPED_TO* like this.\r\n```\r\ncurl -u admin:admin 'http://localhost:7990/bitbucket/rest/prnfb-admin/1.0/settings/notifications' -H 'Content-Type: application/json; charset=UTF-8' -H 'Accept: application/json, text/javascript, */*; q=0.01' --data-binary '{\"uuid\":\"b1306a3a-5a87-4145-80b7-660bc986dd25\",\"name\":\"Notification\",\"projectKey\":\"\",\"repositorySlug\":\"\",\"filterString\":\"\",\"filterRegexp\":\"\",\"triggerIfCanMerge\":\"ALWAYS\",\"triggers\":[\"RESCOPED_FROM\",\"RESCOPED_TO\"],\"injectionUrl\":\"\",\"injectionUrlRegexp\":\"\",\"user\":\"\",\"password\":\"\",\"proxyUser\":\"\",\"proxyPassword\":\"\",\"proxyServer\":\"\",\"proxyPort\":\"\",\"url\":\"http://localhost:80/?abc\",\"method\":\"GET\",\"postContent\":\"\",\"headers\":[{\"name\":\"\",\"value\":\"\"}]}' --compressed\r\n```\r\n\r\nIt will respond with something like this.\r\n```\r\n{\"headers\":[],\"method\":\"GET\",\"name\":\"Notification\",\"triggerIfCanMerge\":\"ALWAYS\",\"triggerIgnoreStateList\":[],\"triggers\":[\"RESCOPED_FROM\",\"RESCOPED_TO\"],\"url\":\"http://localhost:80/?abc\",\"uuid\":\"b1306a3a-5a87-4145-80b7-660bc986dd25\"}\r\n```\r\n\r\nYou may use Chrome and Developer Tools (press F12) to view rest calls while editing in GUI to find more examples.\r\n\r\n### Jenkins\r\nParameterized Jenkins jobs can be triggered remotely by invoking a URL. How you trigger your Jennkins installation may vary depending on how it is configured. Here is, probably, the most complicated scenario where there is CSRF protection and authentication requirements.\r\n\r\nThe job that you want to trigger must have:\r\n * *This build is parameterized* checkbox checked.\r\n * *Trigger builds remotely* checkbox checked.\r\n  * You may, or may not, use a token here.\r\n\r\nI like to add an *Execute shell* build step and then just do `echo param: $paramName` to test that my parameter shows up in the build job log.\r\n\r\nFirst, you may try to trigger Jenkins with [Curl](https://github.com/curl/curl) from command line and then, when you know how it should be done, configure the plugin.\r\n\r\nIf your Jenkins is CSRF protected, you need to get a crumb. It can be done like this.\r\n```\r\ncurl -s 'http://JENKINS_HOSTNAME/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,\":\",//crumb)'\r\n```\r\n\r\nThe response should be something like `Jenkins-Crumb:f122c77298b349b0116140265418ec7f`.\r\n\r\nNow you can trigger a build like this (just remove `?token=YOUR_TOKEN` if you are not using a token).\r\n\r\n```\r\ncurl -u USERNAME:PASSWORD -X POST --data \"paramName=paramValue\" -H \"Jenkins-Crumb:f122c77298b349b0116140265418ec7f\" http://JENKINS_HOSTNAME/job/JENKINS_JOB/buildWithParameters?token=YOUR_TOKEN\r\n```\r\n\r\nNow that job should have been triggered and you should be able to verify that Jenkins is setup correclty. You may want to SSH to the Bitbucket Server machine and do this, to also verify that firewalls are open.\r\n\r\nNow to configure the plugin!\r\n\r\nIf you need ***authentication***, add your username and password in *Basic authentication*.\r\n\r\nIf you are using a ***CSRF*** protection in Jenkins, you can use the **Injection URL** feature.\r\n * Set **Injection URL** field to `http://JENKINS_HOSTNAME/crumbIssuer/api/xml?xpath=//crumb/text()`.\r\n  * You may get an error like *primitive XPath result sets forbidden; implement jenkins.security.SecureRequester*. If so, you can set Injection URL to `http://JENKINS/crumbIssuer/api/xml?xpath=//crumb` in combination with regular expression `<crumb>([^<]*)</crumb>`.\r\n  * A third option is to checkout [this](https://wiki.jenkins-ci.org/display/JENKINS/Secure+Requester+Whitelist+Plugin) Jenkins plugin.\r\n * In the headers section, set header **Jenkins-Crumb** with value **${INJECTION_URL_VALUE}**. The `Jenkins-Crumb` header name was previously just `.crumb`, use whatever the `curl` command responded with above.\r\n\r\nYou may trigger the build with `GET` or `POST`.\r\n\r\nIn ***URL*** add `http://JENKINS_HOSTNAME/job/JENKINS_JOB/buildWithParameters?token=YOUR_TOKEN&paramName=paramValue`.\r\n\r\nThats it! There are some common mistakes.\r\n * If using ${EVERYTHING_URL}, like `...?token=token&${EVERYTHING_URL}` then in your jenkins job you have to have parameters for each parameter, like `PULL_REQUEST_URL`.\r\n * Even when using `POST`, you should add the parameters to the `URL`.\r\n \r\n## Reporting issues\r\nIf things don't work as you expect, perhaps you should file an issue. But first, try troubleshooting it and provide as much info as possible. Here are some things that may help if added to an issue.\r\n\r\n * Plugin version used.\r\n * Bitbucket Server version used.\r\n * Stack traces in Bitbucket Server log file.\r\n * Any browser console log messages, you can find it in Developer Tools in Chome by pressing F12.\r\n * Screenshot of plugin configuration in your issue.\r\n * Your configuration.\r\n   You can get it with something like this:\r\n   \r\n   `curl -u admin:admin 'http://localhost:7990/bitbucket/rest/prnfb-admin/1.0/settings' -H 'Accept: application/json, text/javascript, */*; q=0.01'`\r\n   \r\n   `curl -u admin:admin 'http://localhost:7990/bitbucket/rest/prnfb-admin/1.0/settings/notifications' -H 'Accept: application/json, text/javascript, */*; q=0.01'`.\r\n   \r\n   `curl -u admin:admin 'http://localhost:7990/bitbucket/rest/prnfb-admin/1.0/settings/buttons' -H 'Accept: application/json, text/javascript, */*; q=0.01'`.\r\n * If the system you are trying to notify does not seem to get notified you may check that the triggered URL looks as expected. You can do that by setting up a webserver, let the plugin invoke that with same parameters and then look at its log files to se the requested URL. Or notify *http://cogi.bjurr.se/?${...}* and I can check my logs and tell you what the URL looks like.\r\n\r\n## Developer instructions\r\nThere are some scripts to help working with the plugin.\r\n\r\n * `./setup-atlassian-sdk.sh` Setup Atlassian SDK.\r\n * `./docker-build.sh` Build Docker container.\r\n * `./docker-run.sh` Run the Docker container.\r\n * `./integration-test-local.sh` Run integration tests against localhost.\r\n * `./integration-test.sh` Start Docker container and then runs integration tests against it.\r\n\r\nThe .travis.yml is setting up Atlas SDK and building the plugin. It may help you setup your environment.\r\n\r\nPrerequisites:\r\n\r\n* Atlas SDK [(installation instructions)](https://developer.atlassian.com/docs/getting-started/set-up-the-atlassian-plugin-sdk-and-build-a-project).\r\n* JDK 1.8 or newer\r\n\r\nGenerate Eclipse project:\r\n```\r\natlas-compile eclipse:eclipse\r\n```\r\n\r\nPackage the plugin:\r\n```\r\natlas-package\r\n```\r\n\r\nRun Bitbucket, with the plugin, on localhost:\r\n```\r\nexport MAVEN_OPTS=-Dplugin.resource.directories=`pwd`/src/main/resources\r\natlas-run\r\n```\r\n\r\nYou can also remote debug on port 5005 with:\r\n```\r\natlas-debug\r\n```\r\n\r\nMake a release [(detailed instructions)](https://developer.atlassian.com/docs/common-coding-tasks/development-cycle/packaging-and-releasing-your-plugin):\r\n```\r\nmvn -B release:prepare -DperformRelease=true release:perform\r\n```\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}